apply plugin: 'com.android.application'
//赋值与引用
def cfg = rootProject.ext.android
def appId = rootProject.ext.appId

android {
    compileSdkVersion cfg.compileSdkVersion


    defaultConfig {
        applicationId appId.app
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName

        /** javaCompileOptions ---->配置Java编译的选项
         * 通过在 build.gradle 编译配置(javaCompileOptions)中配置注解处理配置
         * (annotationProcessorOptions)，这样在注解处理器中
         * 加上@SupportedOptions({…})就能拿到该配置，上面demo中配置的值是
         * project.getName()，拿到的就是module的名字。
         */
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]    //把模块名字保存到参数中（key--->values）
            }
        }



    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation project(path: ':base')
    annotationProcessor project(':router_compiler')
    if (isModule) {
        implementation project(path: ':module1')
        implementation project(path: ':module2')
    }

}
